{
  "angular": [
    {
      "id": 1,
      "question": "Що таке Angular CLI?",
      "answer": "Angular CLI — це інтерфейс командного рядка для Angular, який дозволяє автоматизувати процеси розробки, такі як створення проектів, компонентів, сервісів і т.д."
    },
    {
      "id": 2,
      "question": "Що таке сервіс в Angular?",
      "answer": "Сервіси в Angular використовуються для логіки бізнес-процесів та взаємодії з даними, а також можуть бути використані для спільного доступу до цих функцій між різними компонентами."
    },
    {
      "id": 3,
      "question": "Яка різниця між ngOnInit і constructor?",
      "answer": ""
    },
    {
      "id": 4,
      "question": "Що таке директиви в Angular?",
      "answer": ""
    },
    {
      "id": 5,
      "question": "Що таке двостороннє зв'язування даних?",
      "answer": ""
    },
    {
      "id": 6,
      "question": "Яка різниця між компонентами та директивами?",
      "answer": ""
    },
    {
      "id": 7,
      "question": "Що таке зміни в Angular?",
      "answer": ""
    },
    {
      "id": 8,
      "question": "Що таке модулі в Angular?",
      "answer": ""
    },
    {
      "id": 9,
      "question": "Як працює інжектор залежностей в Angular?",
      "answer": ""
    },
    {
      "id": 10,
      "question": "Що таке спостерігачі (Observables) в Angular?",
      "answer": ""
    }
  ],
  "typescript": [
    {
      "id": 1,
      "question": "Що таке типи в TypeScript?",
      "answer": "Типи в TypeScript допомагають визначати структуру та формат даних, що дозволяє уникнути помилок під час компіляції."
    },
    {
      "id": 2,
      "question": "Як працюють інтерфейси?",
      "answer": "Інтерфейси в TypeScript визначають контракт для об'єктів, описуючи їх структуру та забезпечуючи строгість типів."
    },
    {
      "id": 3,
      "question": "Що таке type guards?",
      "answer": ""
    },
    {
      "id": 4,
      "question": "Яка різниця між типами 'any' та 'unknown'?",
      "answer": ""
    },
    {
      "id": 5,
      "question": "Що таке перечислення (Enums) в TypeScript?",
      "answer": ""
    },
    {
      "id": 6,
      "question": "Що таке generics в TypeScript?",
      "answer": ""
    },
    {
      "id": 7,
      "question": "Що таке модифікатори доступу (public, private, protected)?",
      "answer": ""
    },
    {
      "id": 8,
      "question": "Що таке деструктуризація в TypeScript?",
      "answer": ""
    },
    {
      "id": 9,
      "question": "Що таке 'never' тип в TypeScript?",
      "answer": ""
    },
    {
      "id": 10,
      "question": "Що таке 'void' тип в TypeScript?",
      "answer": ""
    }
  ],
  "javascript": [
    {
      "id": 1,
      "question": "Що таке hoisting?",
      "answer": "Hoisting — це механізм в JavaScript, при якому оголошення змінних і функцій переміщуються на початок їхнього обсягу до виконання коду."
    },
    {
      "id": 2,
      "question": "Що таке замикання (closure)?",
      "answer": "Замикання — це функція, яка зберігає доступ до змінних з обсягу, в якому вона була створена, навіть після того, як цей обсяг вже завершив своє виконання."
    },
    {
      "id": 3,
      "question": "Різниця між var, let, const?",
      "answer": ""
    },
    {
      "id": 4,
      "question": "Що таке callback функції?",
      "answer": ""
    },
    {
      "id": 5,
      "question": "Що таке promises в JavaScript?",
      "answer": ""
    },
    {
      "id": 6,
      "question": "Що таке async/await?",
      "answer": ""
    },
    {
      "id": 7,
      "question": "Що таке прототипи (prototypes) в JavaScript?",
      "answer": ""
    },
    {
      "id": 8,
      "question": "Що таке замикання в контексті функцій?",
      "answer": ""
    },
    {
      "id": 9,
      "question": "Яка різниця між == та ===?",
      "answer": ""
    },
    {
      "id": 10,
      "question": "Що таке ES6?",
      "answer": ""
    }
  ],
  "rxjs": [
    {
      "id": 1,
      "question": "Що таке Observable?",
      "answer": "Observable — це патерн, що дозволяє підписуватись на потік даних та реагувати на зміни цих даних, використовуючи оператори RxJS."
    },
    {
      "id": 2,
      "question": "Яка роль операторів map, mergeMap?",
      "answer": "Оператори map і mergeMap дозволяють трансформувати потоки даних. map перетворює значення в потоці, а mergeMap дозволяє обробляти інші Observable у потоці."
    },
    {
      "id": 3,
      "question": "Що таке Subjects у RxJS?",
      "answer": ""
    },
    {
      "id": 4,
      "question": "Що таке операційні функції в RxJS?",
      "answer": ""
    },
    {
      "id": 5,
      "question": "Що таке оператори cold і hot Observable?",
      "answer": ""
    },
    {
      "id": 6,
      "question": "Що таке pipe в RxJS?",
      "answer": ""
    },
    {
      "id": 7,
      "question": "Що таке оператор take?",
      "answer": ""
    },
    {
      "id": 8,
      "question": "Що таке операція merge?",
      "answer": ""
    },
    {
      "id": 9,
      "question": "Що таке оператор debounceTime?",
      "answer": ""
    },
    {
      "id": 10,
      "question": "Що таке оператор switchMap?",
      "answer": ""
    }
  ]
}
